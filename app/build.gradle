apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'com.android.application'

apply plugin: 'kotlin-kapt'//解决报错apply plugin: 'kotlin-kapt'

apply plugin: 'realm-android'

realm {
    syncEnabled = true
}

apply plugin: 'bugly'
bugly {
    appId = 'f4b1fcb8dd' // 注册时分配的App ID
    appKey = 'b8c5cb2b-203f-435d-b6ff-5c0ea22bdb50' // 注册时分配的App Key
    debug = true
}

android {
    signingConfigs {
        Release {
            storeFile file('/Users/qiuchenly/Desktop/AppKey_wawyl2016')
            storePassword 'wawyl2016'
            keyAlias "AppKey"
            keyPassword 'wawyl2016'
        }
    }
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.qiuchenly.comicx"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        ndk {
            //设置支持的SO库架构
            abiFilters 'armeabi', 'x86', 'armeabi-v7a'//, 'arm64-v8a'//, 'x86_64',
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            assets.srcDirs = ['src/main/assets', 'src/main/assets/']
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    buildTypes {
        release {
            bugly.debug false
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.Release //问题出在这里，打包没有应用签名
        }
        debug {
            bugly.debug true
        }
    }

    applicationVariants.all { variant ->
        def file = new File("../编译目录")
        if (file.exists()) {
            for (files in file.listFiles()) {
                if (files.toString().endsWith(".apk")) {
                    files.delete()
                }
            }
        }
        variant.outputs.all { output ->
            variant.getPackageApplicationProvider().get().outputDirectory = file
            def date = new Date()
            def formattedDate = date.format('yyyyMMdd')
            def fileName = "iComicX_${formattedDate}_${variant.mergedFlavor.versionName}_${variant.buildType.name}.apk"
            outputFileName = fileName
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0-rc01'
    testImplementation 'junit:junit:4.13-beta-3'
    androidTestImplementation 'androidx.test:runner:1.3.0-alpha03'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0-alpha03'

    implementation 'org.jsoup:jsoup:1.11.3'

    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.r0adkll:slidableactivity:2.0.6'

    implementation 'com.github.hackware1993:MagicIndicator:1.5.0'

    // kotlin使用realm的注解处理依赖库
    kapt "io.realm:realm-annotations:5.9.1"
    kapt "io.realm:realm-annotations-processor:5.9.1"

    //ConverterFactory的String依赖包----这个是解析数据的工厂.用来格式化数据的,配置编码啊,gson解析啊.

    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'

    implementation 'com.squareup.okhttp3:okhttp:3.14.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.14.1'

    implementation 'jp.wasabeef:glide-transformations:3.0.1'

    kapt 'com.github.bumptech.glide:compiler:4.9.0'
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    implementation 'com.github.bumptech.glide:okhttp3-integration:4.9.0'

//    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.3'
//    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'
//    // Optional, if you use support library fragments:
//    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.3'

    implementation 'com.hyman:flowlayout-lib:1.1.2'

    implementation 'com.android.support:multidex:1.0.3'

    implementation 'io.reactivex.rxjava2:rxjava:2.1.9'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'

    implementation 'com.orhanobut:hawk:2.0.1'

    implementation 'com.github.yalantis:jellytoolbar:v1.0'


    //注释掉原有bugly的仓库
    //implementation 'com.tencent.bugly:crashreport:latest.release'//其中latest.release指代最新版本号，也可以指定明确的版本号，例如2.3.2
    implementation 'com.tencent.bugly:crashreport_upgrade:latest.release'
    //其中latest.release指代最新版本号，也可以指定明确的版本号，例如1.2.0
    implementation 'com.tencent.bugly:nativecrashreport:latest.release'
    //其中latest.release指代最新版本号，也可以指定明确的版本号，例如2.2.0
    implementation 'com.tencent.bugly:nativecrashreport:latest.release'//使用native捕捉库

    implementation 'com.nightonke:boommenu:2.1.1'

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.navigation:navigation-fragment:2.1.0'
    implementation 'androidx.navigation:navigation-ui:2.1.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.1.0'
    implementation 'androidx.navigation:navigation-ui-ktx:2.1.0'
}
